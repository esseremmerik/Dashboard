

if( !class_exists( 'umProSupportModel' ) ) :
class umProSupportModel {
           
    /**
     * Loading all controllers. load pro controllers if pro
     */
    function loadControllers(){
        global $userMeta;
        $controllersOrder = $userMeta->controllersOrder();
        
        $userMeta->isPro = true;  // manually
                                         
        $classes = array();
        foreach( scandir( $userMeta->controllersPath ) as $file ) {
            if( preg_match( "/.php$/i" , $file ) )
                $classes[ str_replace( ".php", "", $file ) ] = $userMeta->controllersPath . $file;            
        }          
        
        if( @$userMeta->isPro && $userMeta->isPro() ){
            $proDir = $userMeta->controllersPath . 'pro/';
            if( file_exists( $proDir ) ){
                foreach( scandir( $proDir ) as $file ) {
                    if( preg_match( "/.php$/i" , $file ) )
                        $classes[ str_replace( ".php", "", $file ) ] = $proDir . $file; 
                }                  
            }          
        }       
               
        foreach( $classes as $className => $classPath ){
            require_once( $classPath );
            if( !in_array( $className, $controllersOrder ) )
                $controllersOrder[] = $className;
        }
                          
        foreach( $controllersOrder as $className ){
            if( class_exists( $className ) )
                $instance[] = new $className;
        }
              
        return $instance;        
    }     

    /**
     * Calling views. if pro then render from pro directory
     */
    function renderPro( $viewName, $parameter = array(), $subdir=null ){
        global $userMeta;        
        
        $subdir = $subdir ? "$subdir/" : null;
        if( @$userMeta->isPro AND self::isPro() AND file_exists( $userMeta->viewsPath . "pro/$subdir" . $viewName . '.php' ) )
            $viewPath = $userMeta->viewsPath . "pro/$subdir" . $viewName . '.php';
        else{
            $viewPath = $userMeta->viewsPath . $subdir . $viewName . '.php';
            if( !file_exists( $viewPath ) ) return;
        }
        
        if( $parameter ) extract($parameter);            
        $pageReturn = include $viewPath;
        if( $pageReturn AND $pageReturn <> 1 )
            return $pageReturn;
        if( @$html ) return $html;        
    }   
    
    /**
     * Check if pro version is validated
     */
    function isPro(){
        $auth = $this->getProAuth();
        return @$auth['valid'] ? true : false;     
    }       
    
    /**
     * Generating proKey
     */
    function generateProKey( $key, $text ){
        if( !( function_exists( 'mcrypt_encrypt' ) ) ) return false;
        return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5(md5(md5($key))), $text, MCRYPT_MODE_CBC, md5(md5($key))));        
    }
    
    /**
     * Validate pro key from http://user-meta.com
     */
    function validateProKey( $email, $pass ){
        global $userMeta;
        
        $msg = array(
            'validated'     => __( 'Successfully validated', $userMeta->name ),
            'noaccess'      => sprintf( __( 'Please purchase %s', $userMeta->name ), "<a href=\"{$userMeta->website}\">User Meta Pro</a>" ),
            'invalid_pass'  => __( 'Invalid email or password.', $userMeta->name ),
            'not_found'     => __( 'Email not found.', $userMeta->name ),
        );
        
        include_once( ABSPATH . 'wp-includes/class-IXR.php' );
        
        $client = new IXR_Client( $userMeta->website . '/xmlrpc.php' );    
        
        if ( !$client->query( 'ump.checkUserAuth', $email, base64_decode( $pass ), network_site_url(), $userMeta->version ) )
            $response = __( 'Something went wrong', $userMeta->name ) . ' - ' . $client->getErrorCode().' : '.$client->getErrorMessage();
        else
            $response = $client->getResponse();     
        
        /*if( !$response ){
            $url = $this->generateProUrl( 'validate', null,  $pass, $email ); 
            $response = file_get_contents( $url );            
        }*/
        
        if( $response == 'validated' )
            $return[ 'validate' ] = true;
        $return[ 'msg' ] = isset( $msg[ $response ] ) ? $msg[ $response ] : $response;
        
        return $return;
    }
    
    /**
     * Generating proUrl for validate or download pro version
     */
    function generateProUrl( $action, $version=null, $text=null, $key=null ){ 
        global $userMeta;
        
        if( !$text || !$key ){        
            $auth  = $this->getProAuth();
            $text   = @$auth['key'];
            $key    = @$auth['email'];
            if( !@$auth['valid'] ) return false;
        }        
                       
        $remoteUrl   = $userMeta->website . "/remote-download/";
        $accessKey  = $this->generateProKey( $key, $text );
        $key2       = $this->generateProKey( $key, time() );
        $siteUrl    = network_site_url();
        $remoteUrl .= "?action=$action&email=$key&key=$accessKey&key2=$key2&site=$siteUrl";
        if( $version )
            $remoteUrl .= "&prev_version=$userMeta->version&version=$version";
        return $remoteUrl;
    }     
       
    /**
     * Update pro account settings
     */
    function updateProAccountSettings( $data ){
        global $userMeta;            
      
        if( !@$data['account_email'] || !@$data['account_pass'] )
            return false;                        
        
        $email  = $data['account_email'];   
        $key    = base64_encode( $data['account_pass'] );                                        
        $validation = $this->validateProKey( $email, $key );                     
        if( @$validation['validate'] ){
            $auth = array(
                'email'         => $data['account_email'],
                'key'           => $key,
                'last_checked'  => time(),
                'status'        => 'validated',
            );                
            $userMeta->updateData( 'pro_auth', $auth );
            echo $userMeta->showMessage( $validation['msg'] );
            
            if( ! $userMeta->isPro ){
                $msg  =  __( 'Redirecting for upgrading to Pro version... ', $userMeta->name );
                $msg .= "<br />". __( 'if not redirecting,', $userMeta->name ) ." <a href='" . $userMeta->pluginUpdateUrl() . "'>" . __( 'click here for upgrading to Pro version', $userMeta->name ) . "</a>";
                echo $userMeta->showMessage( $msg );
                //echo $userMeta->jsRedirect( $userMeta->pluginUpdateUrl() );
            }else{
                echo $userMeta->jsRedirect( $userMeta->adminPageUrl( 'settings', false ) );
            }                    
        }else
            echo $userMeta->showError( $validation['msg'] );
            
        die();                               
    }   
    
    /**
     * get pro authorization data
     */
    function getProAuth(){
        global $userMeta;
        
        $auth = $userMeta->getData( 'pro_auth' );       
        if( @$auth[ 'status' ] == 'validated' )
            $auth[ 'valid' ] = true;        

        return $auth;
    }  
    
    function remoteValidatePro( $args ){
        global $userMeta;
        
        $username   = @$args[0];
        $pass       = @$args[1]; 
        $auth       = @$args[2];
        
        if( ! user_pass_ok( $username, $pass ) )
             return "Username and password doesn't match for your site"; 
         
        $user = get_user_by( 'login', $username );
        if( ! $userMeta->isAdmin( $user->ID ) )
            return "Username: $username is not an admin account";

        if( @$auth['status'] == 'validated' ){
            if( self::isPro() ){
                return "Already Validated";
            }else {
                $userMeta->updateData( 'pro_auth', $auth );
                return "Successfully validated";               
            }
        }   
        return "Not Validated";
    }
    
    /**
     * Showing admin notice to all admin page when pro version is not validated
     */
    function activateLicenseNotice(){
        global $userMeta;            
        if( $userMeta->isPro ){
            if( !$userMeta->isPro() )
                echo $userMeta->showError( sprintf( __( 'Please enter your license information to <a href="%s">activate User Meta Pro</a>.', $userMeta->name ), admin_url( "admin.php?page=user-meta-settings#um_activation_form" ) ) );
        }        
    }
}
endif;